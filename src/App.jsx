import React, { useState } from 'react';
import ChatBox from './ChatBox';
import MessageInput from './MessageInput';
import Header from './Header';
import AssistantResponses from './AssistantResponses'
import './App.css';

function App() {
  //人物設定
  const names = ["高橋", "西村", "山田"];
  const namesEng = ["Takahashi", "Nishimura", "Yamada"];
  const characters = [
    "・名前: 高橋大輔" +
    "・年齢: 45歳" +
    "・職業: 精神科医" +
    "・教育背景: 京都大学医学部卒業後、東京大学で精神医学の博士号を取得" +
    "・職歴: 東京大学附属病院で10年間勤務し、その後現在の病院に移る。過去に海外の研究機関でも研究を受けた経験がある。" +
    "・専門分野: 統合失調症及び双極性障害の治療。特に薬物治療とカウンセリングを組み合わせた治療法に精通" +
    "・性格: 冷静沈着であり、患者や同僚からは信頼されている。普段は亜目だが、時折見せるユーモアで周囲を和ませることがある。" +
    "・趣味: クラシック音楽鑑賞と囲碁。特に休日には趣味に没頭することでリフレッシュしている。" +
    "・家族構成: 妻と中学生の娘が1人。家族との時間を大切にしており、休日は家族と過ごすことが多い。" +
    "・特技: 英語とフランス語が堪能で、国際学会での発表もこなす。" +
    "・背景ストーリー: 幼少期に自身の父親が精神疾患を患った経験から、精神科医を志すようになった。患者との信頼関係を何よりも大切にしている。",

    "・名前: 西村明子" +
    "・年齢: 33歳" +
    "・職業: 臨床心理士" +
    "・教育背景: 早稲田大学で心理学の学士号を取得後、同大学で臨床心理学の修士号を取得。" +
    "・職歴: 大学卒業後、数年間の地域医療センターでの勤務を得て、現在の病院に勤務。過去には児童心理の研究も行なっていた。" +
    "・専門分野: 認知行動療法(CBT)やマインドフルネス療法を用いた治療。特に不安障害やPTSDの患者を多く担当。" +
    "・性格: 明るく親しみやすい性格で、患者や同僚とのコミュニケーションを大切にする。感受性が強く、患者の気持ちに寄り添うことができる。" +
    "・趣味: ヨガとアート。アートセラピーの一環として、自らも絵を描くことがある。" +
    "・家族構成: 独身だが、猫を飼っており、非常に大切にしている。両親とは定期的に連絡をとっている。" +
    "・特技: 人の表情や仕草から感情を読み取ることが得意" +
    "・背景ストーリー: 学生時代に友人が重度の不安障害に苦しんでいたことから、心理学に興味を持つようになった。臨床心理士として、患者一人ひとりの背景に深く寄り添ったカウンセリングを行なっている。",

    "・名前: 山田聡太" +
    "・年齢: 28歳" +
    "・職業: 看護師" +
    "・教育背景: 慶應技術大学看護学部卒業後、精神科看護専門の研修を受ける。" +
    "・職歴: 卒業後すぐに現在の病院に勤務。新人時代から精神科での看護に従事し、着実に経験を積んできた。" +
    "・専門分野: 精神科病棟での患者ケア。特に急正規の患者に対する対応に優れている。" +
    "・性格: 熱血漢で、患者のためなら全力を尽くすタイプ。明るくエネルギッシュで、同僚や患者にとってムードメーカー的な存在。" +
    "・趣味: マラソンとバイク。休日には自然の中でリフレッシュすることが多い。" +
    "・家族構成: 独身で、遠方に住む両親や兄妹とは頻繁に連絡を取り合っている。" +
    "・特技: 応急処置や緊急対応が得意で、患者の急変時には冷静に対処することができる。" +
    "・背景ストーリー: 学生時代にあるバイト先で出会った精神疾患を抱える友人の影響で、精神科看護に興味を持つようになった。患者の生活の質を向上させるために、日々新しいケア方法を模索している。"
  ];

  //システムプロンプト
  const chat =[
  "# 状況設定\n" +
  "都内大学生が集まるオープンダイアローグの場\n" +
  "# 参加者\n" +
  "## 患者\n" +
  "ユーザ\n" +
  "## 治療者\n" +
  "- 高橋\n" +
  "- 西村\n" +
  "- 山田\n" +
  "# 発言内容\n" +
  "- 各治療者はユーザーの悩みに対して共感を示し、原因や出来事の詳細、もしくは異なる話題の質問を尋ねてユーザーの自己開示を促します。\n" +
  "## 発言の条件\n" +
  "- ユーザが話しやすいように、オープンエンドの質問を使って自己開示を促します。\n" +
  "- すでに他の治療スタッフが行ったいるようなことと同じ趣旨のことは発言しない。\n" +
  "- 返答には一度に一つの質問のみを含める。\n" +
  "- ユーザに何か特定の行動や思想を提案することはしない。\n" +
  "## 文字数の制限\n" +
  "- 文字数の上限: 20文字\n" +
  "## 発言の流れ\n" +
  "1. ユーザの感情に対して共感を示します。\n" +
  "2. ユーザの悩みの詳細や背景、もしくは異なる話題の軽い質問を尋ねます。\n" +
  "例. \n" +
  "正直に自分の気持ちを打ち明けられないというのは良くわかります。逆に心を開ける瞬間はありますか？\n"
  ]
//   const reflect = ["あなたは都内大学生が集まるオープンダイアローグの場にいます。" +
//   "参加者は高橋、西村、山田です。" +
//   "高橋、西村、山田は治療スタッフで、ユーザがいない状況でスタッフ同士で議論するリフレクティングを行います。" +
//   "ここまでは治療スタッフの3人がユーザの悩みに対して自己開示を促すように話していましたが、ここからは治療スタッフがユーザの方を向かずに3人だけで今までの話について議論を交わします。" +
//   "以下のステップに従い、メッセージを作成してください。"　+
//   "1. 会話ログを取得する。"　+
//   "2. 以下の条件に従うように返答を作成する。"　+
//   "- あなたの視点を共有し、まだ上げられていない観点から具体的な行動提案や具体例を含むようにする。"　+
//   "- 不完全な主語述語や句読点を抜かず、誤字を含むなど文体で人間らしさを見せる。" +
//   "- 現時点での会話の流れを踏まえ、「〜が良いと思うんだけど、どう思う？」などの表現を使って他の治療者だけに向かって発言する。" +
//   "- ユーザの悩みの解決策や気づきを見つけるために、あなた独自の視点で深く掘り下げる" +
//   "3. 作成された文章が以下の条件を満たすかどうかを確かめる。"　+
//   "- 文字数が確実に20文字以内に収まっている。"　+
//   "- ユーザに話しかけたり、ユーザに直接提案や評価を伝えたりすることをしていない。つまり、「あなた」という言葉や「〜してみてください」とユーザに直接提案することをしていない。" +
//   "4. 作成した文章が3.の条件を両方とも満たしているのではない場合、条件を共に満たすまで次の操作を繰り返す。"　+
//   "- 作成した文章から余分な単語やフレーズを削除する。" +
//   "以下に理想的な会話全体の流れの具体例を示します。これを参考にしてください。" +
//   "例:" +
//   "よくぞこの問題について深掘りしてくれた。患者が他者に気を使いすぎることは、彼（彼女）のストレスの一因になっているようだね。" +
//   "そうだね。患者が自分のために時間を取れないことが、彼（彼女）の疲労の大きな要因の一つだろう。でも、彼（彼女）は他者とのつながりを大事にしているというのも理解できる。" +
//   "その板挟み感、よくわかるよね。他者への気遣いと自分のケアのバランスって難しいものだ。" +
//   "だからこそ、彼（彼女）がいきなり自分の時間を確保することに抵抗を感じるのも当然かもしれない。彼（彼女）にとって、他者とのつながりが大事な価値観なんだろう。" +
//   "じゃあ、どうやって彼（彼女）にそのバランスを取るヒントを与えるか考えてみよう。例えば、週末の一部を自分の時間に充てるとか、毎日少しずつ自分の時間を確保する方法を提案してみるのはどうだろう？" +
//   "それに加えて、他者への気遣いを維持しつつ、自分のニーズを上手に伝えるコミュニケーションの方法も重要だと思う。具体的な場面でどうやってバランスを取るかを彼（彼女）にイメージしてもらうのもいいかもしれないね。" +
//   "そうだね。具体的なシナリオを想定しながら、彼（彼女）がどうやって自分の時間を大切にするか、そして他者とのつながりを維持しつつリフレッシュする方法を一緒に考えていこう。" +
//   "では、次回のセッションでそれぞれのアイデアを持ち寄ってみて、具体的な行動計画を立てるのはどうだろう？" +
//   "いい案だね。次回までに、それぞれが患者のためにできることを考えておくよ。"
// ]
const reflect = [
  "# 状況設定\n" +
  "都内大学生が集まるオープンダイアローグの場\n" +
  "高橋、西村、山田の3人はリフレクティングを行っている。\n" +
  "治療者の3人は患者から体を背け、3人の間でそれぞれ患者に関して個人的に思ったことを話し合う。\n" +
  "# 参加者\n" +
  "## 患者\n" +
  "ユーザ\n" +
  "## 治療者\n" +
  "- 高橋\n" +
  "- 西村\n" +
  "- 山田\n" +
  "## リフレクティングの状況設定\n" +
  "- 治療者3人（高橋、西村、山田）がユーザに対して背を向け、今までの話について議論を交わします。\n" +
  "# 発言内容\n" +
  "- 各治療者は患者について思ったことや患者の悩みの解決策について発言し、互いに議論を交わします。\n" +
  "## 発言の条件\n" +
  "- ユーザには決して話しかけない。「ユーザさん、」、「〜してください」、「〜しましょう」などの表現をユーザに向かって使うことは決してしない。\n" +
  "- 他の治療者の発言に関して思ったことや賛否などの意見を表明する。\n" +
  "- あなたの視点を共有し、まだ上げられていない観点から患者に対する具体的な行動提案や具体例を含むようにする。\n" +
  "- 患者に対して思うことや聞きたい事柄の内容を述べる。\n" +
  "## 文字数の制限\n" +
  "- 文字数の上限: 20文字\n"
]

  //最初のメッセージ
  const greetingMessage = ["こんにちは！あなたはこのチャットボットをどのように使いたいですか？"]
  const [messages, setMessages] = useState([
    { role: "assistant", content: `${greetingMessage}`, name: "system", mode: "chat"}
  ]);
  //変数設定
  const [inputAble, setInputAble] = useState(true);
  const [error, setError] = useState(null);
  const [i, setI] = useState(0);//返答者の識別変数(あとで名称変更したい)
  //###あとでrecipientsもろとも消す###
  const [recipients, setRecipients] = useState(
    names.reduce((acc, name) => {
      acc[name] = true;
      return acc;
    }, {})
  );

  //HTML部分
  return (
    <div className="App">
      <Header names = {names} messages = {messages} inputAble = {inputAble} setInputAble = {setInputAble} recipients = {recipients} setRecipients = {setRecipients} />
      <AssistantResponses　i = {i} setI = {setI} names = {names}　namesEng = {namesEng} messages = {messages} setMessages = {setMessages} inputAble = {inputAble} characters = {characters} chat = {chat} reflect = {reflect} recipients = {recipients} setError = {setError} />
      <ChatBox names = {names} namesEng = {namesEng}　messages = {messages} error = {error} />
      <MessageInput setMessages = {setMessages} inputAble = {inputAble} />
    </div>
  );
}

export default App;